#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 구조체 정의
typedef struct BookNode {
    char title[100];
    char writer[100];
    int year;
    int borrowed;
    struct BookNode* left;
    struct BookNode* right;
} BookNode;

// 함수 선언
BookNode* create_node(const char* title, const char* writer, int year);
BookNode* add_book(BookNode* root, const char* title, const char* writer, int year);
BookNode* search_book(BookNode* root, const char* title);
void borrow_book(BookNode* root, const char* title);
void return_book(BookNode* root, const char* title);
BookNode* delete_book(BookNode* root, const char* title);
BookNode* find_min(BookNode* root);
void print_books(BookNode* root);

int main() {
    BookNode* root = NULL;
    int choice;
    char title[100], writer[100];
    int year;

    while (1) {
        printf("\n ==================== 도서 관리 프로그램 ====================\n");
        printf("[1] 책 등록 [2] 책 검색 [3] 책 삭제 [4] 도서 목록 출력 [5] 책 대출 [6] 책 반납 [7] 종료 => ");
        scanf("%d", &choice);
        while (getchar() != '\n');

        switch (choice) {
            case 1:
                printf("책 제목: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0;

                printf("저자: ");
                fgets(writer, sizeof(writer), stdin);
                writer[strcspn(writer, "\n")] = 0;

                printf("출판 연도: ");
                scanf("%d", &year);
                while (getchar() != '\n');

                root = add_book(root, title, writer, year);
                printf("책이 등록되었습니다.\n");
                break;

            case 2:
                printf("검색할 책 제목: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0;

                BookNode* found = search_book(root, title);
                if (found != NULL) {
                    printf("책 제목: %s, 저자: %s, 출판 연도: %d, 상태: %s\n",
                        found->title, found->writer, found->year,
                        found->borrowed ? "대출 중" : "대출 가능");
                } else {
                    printf("책을 찾을 수 없습니다.\n");
                }
                break;

            case 3:
                printf("삭제할 책 제목: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0;

                root = delete_book(root, title);
                printf("책이 삭제되었습니다.\n");
                break;

            case 4:
                printf("\n도서 목록:\n");
                print_books(root);
                break;

            case 5:
                printf("대출할 책 제목: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0;
                borrow_book(root, title);
                break;

            case 6:
                printf("반납할 책 제목: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0;
                return_book(root, title);
                break;

            case 7:
                printf("프로그램을 종료합니다.\n");
                return 0;

            default:
                printf("잘못된 선택입니다.\n");
        }
    }

    return 0;
}

// 함수 정의
BookNode* create_node(const char* title, const char* writer, int year) {
    BookNode* new_node = (BookNode*)malloc(sizeof(BookNode));
    if (new_node != NULL) {
        strcpy(new_node->title, title);
        strcpy(new_node->writer, writer);
        new_node->year = year;
        new_node->borrowed = 0;
        new_node->left = NULL;
        new_node->right = NULL;
    }
    return new_node;
}

BookNode* add_book(BookNode* root, const char* title, const char* writer, int year) {
    if (root == NULL) return create_node(title, writer, year);

    if (strcmp(title, root->title) < 0)
        root->left = add_book(root->left, title, writer, year);
    else
        root->right = add_book(root->right, title, writer, year);
    return root;
}

BookNode* search_book(BookNode* root, const char* title) {
    if (root == NULL || strcmp(title, root->title) == 0)
        return root;

    if (strcmp(title, root->title) < 0)
        return search_book(root->left, title);
    else
        return search_book(root->right, title);
}

void borrow_book(BookNode* root, const char* title) {
    BookNode* book = search_book(root, title);
    if (book == NULL) {
        printf("책을 찾을 수 없습니다.\n");
    } else if (book->borrowed) {
        printf("이미 대출 중인 책입니다.\n");
    } else {
        book->borrowed = 1;
        printf("책 \"%s\"이(가) 대출되었습니다.\n", book->title);
    }
}

void return_book(BookNode* root, const char* title) {
    BookNode* book = search_book(root, title);
    if (book == NULL) {
        printf("책을 찾을 수 없습니다.\n");
    } else if (!book->borrowed) {
        printf("이 책은 이미 반납된 상태입니다.\n");
    } else {
        book->borrowed = 0;
        printf("책 \"%s\"이(가) 반납되었습니다.\n", book->title);
    }
}

BookNode* find_min(BookNode* root) {
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}

BookNode* delete_book(BookNode* root, const char* title) {
    if (root == NULL) return root;

    if (strcmp(title, root->title) < 0) {
        root->left = delete_book(root->left, title);
    } else if (strcmp(title, root->title) > 0) {
        root->right = delete_book(root->right, title);
    } else {
        if (root->left == NULL) {
            BookNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            BookNode* temp = root->left;
            free(root);
            return temp;
        }
        BookNode* temp = find_min(root->right);
        strcpy(root->title, temp->title);
        strcpy(root->writer, temp->writer);
        root->year = temp->year;
        root->borrowed = temp->borrowed;
        root->right = delete_book(root->right, temp->title);
    }
    return root;
}

void print_books(BookNode* root) {
    if (root != NULL) {
        print_books(root->left);
        printf("제목: %s, 저자: %s, 출판연도: %d, 상태: %s\n",
               root->title, root->writer, root->year,
               root->borrowed ? "대출 중" : "대출 가능");
        print_books(root->right);
    }
}
